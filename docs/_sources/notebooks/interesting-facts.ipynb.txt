{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aaf3efb8",
   "metadata": {},
   "source": [
    "# Interesting Facts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5e6da917",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from pathlib import Path\n",
    "\n",
    "from arcgis.features import GeoAccessor\n",
    "from arcgis.geoenrichment._business_analyst import BusinessAnalyst\n",
    "from arcgis.gis import GIS\n",
    "from dotenv import load_dotenv, find_dotenv\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c43cfd09",
   "metadata": {},
   "source": [
    "Next, we need some test data to work with. Hence, here we are accessing two files with pickled exports from Spatially Enabled Pandas Data Frames. One is of postal codes (zip codes) in Portland, Oregon, and the other is for block groups in Portland."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3ed3a5c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load .env file\n",
    "load_dotenv(find_dotenv())\n",
    "\n",
    "# paths to input data\n",
    "dir_prj = Path.cwd().parent\n",
    "dir_data = dir_prj/'data'\n",
    "dir_raw = dir_data/'raw'\n",
    "\n",
    "# specifically, the data being used for this example - pickled dataframes\n",
    "postal_codes_pth = dir_raw/'postal_codes.pkl'\n",
    "block_groups_pth = dir_raw/'block_groups.pkl'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "05b9a708",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "GIS @ <a href=\"https://baqa.mapsqa.arcgis.com\">https://baqa.mapsqa.arcgis.com</a>"
      ],
      "text/plain": [
       "GIS @ https://baqa.mapsqa.arcgis.com version:9.4"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gis_agol = GIS(\n",
    "    url=os.getenv('ESRI_GIS_URL'), \n",
    "    username=os.getenv('ESRI_GIS_USERNAME'),\n",
    "    password=os.getenv('ESRI_GIS_PASSWORD')\n",
    ")\n",
    "\n",
    "gis_agol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fefbc6f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BusinessAnalyst (GIS @ https://baqa.mapsqa.arcgis.com version:9.4)>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ba = BusinessAnalyst(gis_agol)\n",
    "\n",
    "ba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0dc3728b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'_source': GIS @ https://baqa.mapsqa.arcgis.com version:9.4,\n",
       " '_base_url': 'https://geoenrichqa.arcgis.com/arcgis/rest/services/World/GeoenrichmentServer',\n",
       " '_lazy_countries':     iso2 iso3    country_name        datasets default_dataset  \\\n",
       " 0     AL  ALB         Albania  [ALB_MBR_2020]    ALB_MBR_2020   \n",
       " 1     DZ  DZA         Algeria  [DZA_MBR_2019]    DZA_MBR_2019   \n",
       " 2     AD  AND         Andorra  [AND_MBR_2020]    AND_MBR_2020   \n",
       " 3     AO  AGO          Angola  [AGO_MBR_2019]    AGO_MBR_2019   \n",
       " 4     AI  AIA        Anguilla  [AIA_MBR_2020]    AIA_MBR_2020   \n",
       " ..   ...  ...             ...             ...             ...   \n",
       " 149   UZ  UZB      Uzbekistan  [UZB_MBR_2020]    UZB_MBR_2020   \n",
       " 150   VE  VEN       Venezuela  [VEN_MBR_2020]    VEN_MBR_2020   \n",
       " 151   VN  VNM         Vietnam  [VNM_MBR_2020]    VNM_MBR_2020   \n",
       " 152   VI  VIR  Virgin Islands  [VIR_MBR_2020]    VIR_MBR_2020   \n",
       " 153   ZM  ZMB          Zambia  [ZMB_MBR_2019]    ZMB_MBR_2019   \n",
       " \n",
       "                               alt_name      continent  \n",
       " 0                              ALBANIA         Europe  \n",
       " 1                              ALGERIA         Africa  \n",
       " 2                              ANDORRA         Europe  \n",
       " 3                               ANGOLA         Africa  \n",
       " 4                             ANGUILLA  North America  \n",
       " ..                                 ...            ...  \n",
       " 149                         UZBEKISTAN           Asia  \n",
       " 150  VENEZUELA, BOLIVARIAN REPUBLIC OF  South America  \n",
       " 151                           VIET NAM           Asia  \n",
       " 152       UNITED STATES VIRGIN ISLANDS  North America  \n",
       " 153                             ZAMBIA         Africa  \n",
       " \n",
       " [154 rows x 7 columns]}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ba.__dict__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d23c31c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "usa = ba.get_country('usa')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c9a7805e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'US.BlockGroups'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "usa.geography_levels[usa.geography_levels['level_name'] == 'block_groups']['level_id'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "995d0267",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
