{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import importlib\n",
    "import os\n",
    "from pathlib import Path\n",
    "import sys\n",
    "\n",
    "from arcgis.features import GeoAccessor\n",
    "import arcpy\n",
    "from dotenv import load_dotenv, find_dotenv\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "dir_prj = Path.cwd().parent.parent\n",
    "dir_data = dir_prj/'data'\n",
    "dir_raw = dir_data/'raw'\n",
    "gdb_raw = dir_raw/'raw.gdb'\n",
    "dir_pkl = dir_prj/'src'/'demo_data'/'pkl_files'\n",
    "\n",
    "# import the project package from the project package path - only necessary if you are not using a unique environemnt for this project\n",
    "sys.path.append(str(dir_prj/'src'))\n",
    "import ba_samples\n",
    "\n",
    "# load the \"autoreload\" extension so that code can change, & always reload modules so that as you change code in src, it gets loaded\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/pdx_block_groups'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/pdx_cbsa'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/pdx_coffee_locations'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/pdx_coffee_study_areas_3min'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/pdx_postal_codes'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/sea_block_groups'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/sea_cbsa'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/van_cmaca'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/van_dissemination_areas'),\n",
       " WindowsPath('D:/projects/business-analyst-python-api-examples/data/raw/raw.gdb/van_census_tracts')]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arcpy.env.workspace = str(gdb_raw)\n",
    "fc_lst = [gdb_raw/fc for fc in arcpy.ListFeatureClasses()]\n",
    "\n",
    "fc_lst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "for fc in fc_lst:\n",
    "    df = GeoAccessor.from_featureclass(fc)\n",
    "    keep_cols = [c for c in df.columns if c.lower() == 'id' or c == 'SHAPE' or c == 'LOCNUM']\n",
    "    df = df.loc[:,keep_cols]\n",
    "    df.to_pickle(dir_pkl/f'{fc.name}.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from demo_data import demo_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>SHAPE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9320014.00</td>\n",
       "      <td>{\"rings\": [[[-122.3599099999031, 49.0824700000...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9320206.00</td>\n",
       "      <td>{\"rings\": [[[-122.2692710001368, 49.1865999997...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9320207.00</td>\n",
       "      <td>{\"rings\": [[[-122.3291220006446, 49.1598059995...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9330001.01</td>\n",
       "      <td>{\"rings\": [[[-123.0234740000042, 49.2230569998...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9330001.02</td>\n",
       "      <td>{\"rings\": [[[-123.0229470006478, 49.2025850000...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>476</th>\n",
       "      <td>9330505.01</td>\n",
       "      <td>{\"rings\": [[[-122.54151200019919, 49.165707000...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477</th>\n",
       "      <td>9330505.03</td>\n",
       "      <td>{\"rings\": [[[-122.5484770006181, 49.1696790000...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>478</th>\n",
       "      <td>9330505.04</td>\n",
       "      <td>{\"rings\": [[[-122.5484770006181, 49.1696790000...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>479</th>\n",
       "      <td>9330506.01</td>\n",
       "      <td>{\"rings\": [[[-122.4595100000558, 49.0749220000...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>9330506.02</td>\n",
       "      <td>{\"rings\": [[[-122.45946400002501, 49.045868000...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>481 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             ID                                              SHAPE\n",
       "0    9320014.00  {\"rings\": [[[-122.3599099999031, 49.0824700000...\n",
       "1    9320206.00  {\"rings\": [[[-122.2692710001368, 49.1865999997...\n",
       "2    9320207.00  {\"rings\": [[[-122.3291220006446, 49.1598059995...\n",
       "3    9330001.01  {\"rings\": [[[-123.0234740000042, 49.2230569998...\n",
       "4    9330001.02  {\"rings\": [[[-123.0229470006478, 49.2025850000...\n",
       "..          ...                                                ...\n",
       "476  9330505.01  {\"rings\": [[[-122.54151200019919, 49.165707000...\n",
       "477  9330505.03  {\"rings\": [[[-122.5484770006181, 49.1696790000...\n",
       "478  9330505.04  {\"rings\": [[[-122.5484770006181, 49.1696790000...\n",
       "479  9330506.01  {\"rings\": [[[-122.4595100000558, 49.0749220000...\n",
       "480  9330506.02  {\"rings\": [[[-122.45946400002501, 49.045868000...\n",
       "\n",
       "[481 rows x 2 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = demo_data.van_census_tracts.sedf\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
