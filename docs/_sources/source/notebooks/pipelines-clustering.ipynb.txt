{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Integrating into Pipelines for Clustering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Starting off, we import a few required Python resources. While there are quite a few in there, notice we are grabbing the `make_pipeline` method from Sci-Kit Learn. We are going to be building pipelines!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "from pathlib import Path\n",
    "import sys\n",
    "\n",
    "from arcgis.features import GeoAccessor\n",
    "from arcgis.geoenrichment import Country\n",
    "from arcgis.gis import GIS\n",
    "from dotenv import find_dotenv, load_dotenv\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "# load the \"autoreload\" extension so that code can change, & always reload modules so that as you change code in src, it gets loaded\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load environment variables from .env\n",
    "load_dotenv(find_dotenv())\n",
    "\n",
    "# paths to input data\n",
    "dir_prj = Path.cwd().parent\n",
    "dir_data = dir_prj/'data'\n",
    "dir_raw = dir_data/'raw'\n",
    "\n",
    "# import the two preprocessors from the examples\n",
    "sys.path.append(str(dir_prj/'src'))\n",
    "from ba_samples.preprocessing import EnrichStandardGeography, KeepOnlyEnrichColumns, ArrayToDataFrame\n",
    "\n",
    "# specifically, the data being used for this example - pickled dataframes\n",
    "postal_codes_pth = dir_raw/'pdx_postal_codes.pkl'\n",
    "block_groups_pth = dir_raw/'pdx_block_groups.pkl'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Pipeline for Zip Codes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We start by getting a list of standard geography codes to use from the demonstration postal code data, just a list of zip codes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['97038', '97101', '97304', '97347', '97362', '97375', '97396', '97002', '97003', '97004', '97005', '97006', '97007', '97008', '97009', '97013', '97015', '97016', '97017', '97018', '97022', '97024', '97027', '97030', '97032', '97034', '97035', '97036', '97042', '97045', '97048', '97051', '97053', '97054', '97056', '97060', '97062', '97064', '97068', '97070', '97071', '97078', '97080', '97086', '97089', '97106', '97109', '97111', '97113', '97114', '97115', '97116', '97117', '97119', '97123', '97124', '97125', '97127', '97128', '97132', '97133', '97140', '97144', '97148', '97201', '97202', '97203', '97204', '97205', '97206', '97209', '97210', '97211', '97212', '97213', '97214', '97215', '97216', '97217', '97218', '97219', '97220', '97221', '97222', '97223', '97224', '97225', '97227', '97229', '97230', '97231', '97232', '97233', '97236', '97239', '97266', '97267', '97378', '98601', '98604', '98606', '98607', '98629', '98642', '98649', '98660', '98661', '98662', '98663', '98664', '98665', '98674', '98675', '98682', '98683', '98684', '98685', '98686', '97023', '97010', '97011', '97014', '97019', '97028', '97049', '97055', '97067', '98605', '98610', '98639', '98648', '98651', '98671']\n"
     ]
    }
   ],
   "source": [
    "postal_code_df = pd.read_pickle(postal_codes_pth)\n",
    "postal_code_lst = list(postal_code_df['ID'])\n",
    "\n",
    "print(postal_code_lst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Get a Local Country\n",
    "\n",
    "To enrich, we need a `Country` object instance. As part of the constructor, we need to tell the object what Business Analyst source to use in the `gis` parameter. In this case, we are telling the object to use ArcGIS Pro with Business Analyst and local data for the United States."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Country - United States 2021 ('local')>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "usa_local = Country('usa', gis=GIS('pro'))\n",
    "\n",
    "usa_local"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Select Variables\n",
    "\n",
    "Next, we need to get some enrich variables to use. We can discover what is available using the `enrich_variables` property of the country object to retrieve a Pandas Data Frame of variables available for the country. From these tens of thousands of variables, we can prune this down to a manageable subset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>alias</th>\n",
       "      <th>data_collection</th>\n",
       "      <th>enrich_name</th>\n",
       "      <th>enrich_field_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TOTPOP_CY</td>\n",
       "      <td>2021 Total Population</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.TOTPOP_CY</td>\n",
       "      <td>KeyUSFacts_TOTPOP_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GQPOP_CY</td>\n",
       "      <td>2021 Group Quarters Population</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.GQPOP_CY</td>\n",
       "      <td>KeyUSFacts_GQPOP_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DIVINDX_CY</td>\n",
       "      <td>2021 Diversity Index</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.DIVINDX_CY</td>\n",
       "      <td>KeyUSFacts_DIVINDX_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>TOTHH_CY</td>\n",
       "      <td>2021 Total Households</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.TOTHH_CY</td>\n",
       "      <td>KeyUSFacts_TOTHH_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AVGHHSZ_CY</td>\n",
       "      <td>2021 Average Household Size</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.AVGHHSZ_CY</td>\n",
       "      <td>KeyUSFacts_AVGHHSZ_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>MEDHINC_CY</td>\n",
       "      <td>2021 Median Household Income</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.MEDHINC_CY</td>\n",
       "      <td>KeyUSFacts_MEDHINC_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AVGHINC_CY</td>\n",
       "      <td>2021 Average Household Income</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.AVGHINC_CY</td>\n",
       "      <td>KeyUSFacts_AVGHINC_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>PCI_CY</td>\n",
       "      <td>2021 Per Capita Income</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.PCI_CY</td>\n",
       "      <td>KeyUSFacts_PCI_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>TOTHU_CY</td>\n",
       "      <td>2021 Total Housing Units</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.TOTHU_CY</td>\n",
       "      <td>KeyUSFacts_TOTHU_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>OWNER_CY</td>\n",
       "      <td>2021 Owner Occupied HUs</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.OWNER_CY</td>\n",
       "      <td>KeyUSFacts_OWNER_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>RENTER_CY</td>\n",
       "      <td>2021 Renter Occupied HUs</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.RENTER_CY</td>\n",
       "      <td>KeyUSFacts_RENTER_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>VACANT_CY</td>\n",
       "      <td>2021 Vacant Housing Units</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.VACANT_CY</td>\n",
       "      <td>KeyUSFacts_VACANT_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>MEDVAL_CY</td>\n",
       "      <td>2021 Median Home Value</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.MEDVAL_CY</td>\n",
       "      <td>KeyUSFacts_MEDVAL_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>AVGVAL_CY</td>\n",
       "      <td>2021 Average Home Value</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.AVGVAL_CY</td>\n",
       "      <td>KeyUSFacts_AVGVAL_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>POPGRW10CY</td>\n",
       "      <td>2010-2021 Growth Rate: Population</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.POPGRW10CY</td>\n",
       "      <td>KeyUSFacts_POPGRW10CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>HHGRW10CY</td>\n",
       "      <td>2010-2021 Growth Rate: Households</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.HHGRW10CY</td>\n",
       "      <td>KeyUSFacts_HHGRW10CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>FAMGRW10CY</td>\n",
       "      <td>2010-2021 Growth Rate: Families</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.FAMGRW10CY</td>\n",
       "      <td>KeyUSFacts_FAMGRW10CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>DPOP_CY</td>\n",
       "      <td>2021 Total Daytime Population</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.DPOP_CY</td>\n",
       "      <td>KeyUSFacts_DPOP_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>DPOPWRK_CY</td>\n",
       "      <td>2021 Daytime Pop: Workers</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.DPOPWRK_CY</td>\n",
       "      <td>KeyUSFacts_DPOPWRK_CY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>DPOPRES_CY</td>\n",
       "      <td>2021 Daytime Pop: Residents</td>\n",
       "      <td>KeyUSFacts</td>\n",
       "      <td>KeyUSFacts.DPOPRES_CY</td>\n",
       "      <td>KeyUSFacts_DPOPRES_CY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          name                              alias data_collection  \\\n",
       "0    TOTPOP_CY              2021 Total Population      KeyUSFacts   \n",
       "1     GQPOP_CY     2021 Group Quarters Population      KeyUSFacts   \n",
       "2   DIVINDX_CY               2021 Diversity Index      KeyUSFacts   \n",
       "3     TOTHH_CY              2021 Total Households      KeyUSFacts   \n",
       "4   AVGHHSZ_CY        2021 Average Household Size      KeyUSFacts   \n",
       "5   MEDHINC_CY       2021 Median Household Income      KeyUSFacts   \n",
       "6   AVGHINC_CY      2021 Average Household Income      KeyUSFacts   \n",
       "7       PCI_CY             2021 Per Capita Income      KeyUSFacts   \n",
       "8     TOTHU_CY           2021 Total Housing Units      KeyUSFacts   \n",
       "9     OWNER_CY            2021 Owner Occupied HUs      KeyUSFacts   \n",
       "10   RENTER_CY           2021 Renter Occupied HUs      KeyUSFacts   \n",
       "11   VACANT_CY          2021 Vacant Housing Units      KeyUSFacts   \n",
       "12   MEDVAL_CY             2021 Median Home Value      KeyUSFacts   \n",
       "13   AVGVAL_CY            2021 Average Home Value      KeyUSFacts   \n",
       "14  POPGRW10CY  2010-2021 Growth Rate: Population      KeyUSFacts   \n",
       "15   HHGRW10CY  2010-2021 Growth Rate: Households      KeyUSFacts   \n",
       "16  FAMGRW10CY    2010-2021 Growth Rate: Families      KeyUSFacts   \n",
       "17     DPOP_CY      2021 Total Daytime Population      KeyUSFacts   \n",
       "18  DPOPWRK_CY          2021 Daytime Pop: Workers      KeyUSFacts   \n",
       "19  DPOPRES_CY        2021 Daytime Pop: Residents      KeyUSFacts   \n",
       "\n",
       "              enrich_name      enrich_field_name  \n",
       "0    KeyUSFacts.TOTPOP_CY   KeyUSFacts_TOTPOP_CY  \n",
       "1     KeyUSFacts.GQPOP_CY    KeyUSFacts_GQPOP_CY  \n",
       "2   KeyUSFacts.DIVINDX_CY  KeyUSFacts_DIVINDX_CY  \n",
       "3     KeyUSFacts.TOTHH_CY    KeyUSFacts_TOTHH_CY  \n",
       "4   KeyUSFacts.AVGHHSZ_CY  KeyUSFacts_AVGHHSZ_CY  \n",
       "5   KeyUSFacts.MEDHINC_CY  KeyUSFacts_MEDHINC_CY  \n",
       "6   KeyUSFacts.AVGHINC_CY  KeyUSFacts_AVGHINC_CY  \n",
       "7       KeyUSFacts.PCI_CY      KeyUSFacts_PCI_CY  \n",
       "8     KeyUSFacts.TOTHU_CY    KeyUSFacts_TOTHU_CY  \n",
       "9     KeyUSFacts.OWNER_CY    KeyUSFacts_OWNER_CY  \n",
       "10   KeyUSFacts.RENTER_CY   KeyUSFacts_RENTER_CY  \n",
       "11   KeyUSFacts.VACANT_CY   KeyUSFacts_VACANT_CY  \n",
       "12   KeyUSFacts.MEDVAL_CY   KeyUSFacts_MEDVAL_CY  \n",
       "13   KeyUSFacts.AVGVAL_CY   KeyUSFacts_AVGVAL_CY  \n",
       "14  KeyUSFacts.POPGRW10CY  KeyUSFacts_POPGRW10CY  \n",
       "15   KeyUSFacts.HHGRW10CY   KeyUSFacts_HHGRW10CY  \n",
       "16  KeyUSFacts.FAMGRW10CY  KeyUSFacts_FAMGRW10CY  \n",
       "17     KeyUSFacts.DPOP_CY     KeyUSFacts_DPOP_CY  \n",
       "18  KeyUSFacts.DPOPWRK_CY  KeyUSFacts_DPOPWRK_CY  \n",
       "19  KeyUSFacts.DPOPRES_CY  KeyUSFacts_DPOPRES_CY  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ev = usa_local.enrich_variables\n",
    "kv = ev[\n",
    "    (ev.data_collection.str.lower().str.contains('key'))\n",
    "    & (ev.name.str.lower().str.endswith('cy'))\n",
    "].reset_index(drop=True)\n",
    "\n",
    "kv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "### Get Standard Geography Name\n",
    "\n",
    "Using the `levels` property, we can see the value we need to use for specifying the specfic zip code level, `zip5`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>level_name</th>\n",
       "      <th>alias</th>\n",
       "      <th>level_id</th>\n",
       "      <th>id_field</th>\n",
       "      <th>name_field</th>\n",
       "      <th>singular_name</th>\n",
       "      <th>plural_name</th>\n",
       "      <th>admin_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>block_groups</td>\n",
       "      <td>Block Groups</td>\n",
       "      <td>US.BlockGroups</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>Block Group</td>\n",
       "      <td>Block Groups</td>\n",
       "      <td>Admin11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tracts</td>\n",
       "      <td>Census Tracts</td>\n",
       "      <td>US.Tracts</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>Census Tract</td>\n",
       "      <td>Census Tracts</td>\n",
       "      <td>Admin10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>places</td>\n",
       "      <td>Cities and Towns (Places)</td>\n",
       "      <td>US.Places</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>Place</td>\n",
       "      <td>Places</td>\n",
       "      <td>Admin9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>zip5</td>\n",
       "      <td>ZIP Codes</td>\n",
       "      <td>US.ZIP5</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>ZIP Code</td>\n",
       "      <td>ZIP Codes</td>\n",
       "      <td>Admin4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>csd</td>\n",
       "      <td>County Subdivisions</td>\n",
       "      <td>US.CSD</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>County Subdivision</td>\n",
       "      <td>County Subdivisions</td>\n",
       "      <td>Admin7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>counties</td>\n",
       "      <td>Counties</td>\n",
       "      <td>US.Counties</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>County</td>\n",
       "      <td>Counties</td>\n",
       "      <td>Admin3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cbsa</td>\n",
       "      <td>CBSAs</td>\n",
       "      <td>US.CBSA</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>CBSA</td>\n",
       "      <td>CBSAs</td>\n",
       "      <td>Admin5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cd</td>\n",
       "      <td>Congressional Districts</td>\n",
       "      <td>US.CD</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>Congressional District</td>\n",
       "      <td>Congressional Districts</td>\n",
       "      <td>Admin8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>dma</td>\n",
       "      <td>DMAs</td>\n",
       "      <td>US.DMA</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>DMA</td>\n",
       "      <td>DMAs</td>\n",
       "      <td>Admin6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>states</td>\n",
       "      <td>States</td>\n",
       "      <td>US.States</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>State</td>\n",
       "      <td>States</td>\n",
       "      <td>Admin2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>whole_usa</td>\n",
       "      <td>Entire Country</td>\n",
       "      <td>US.WholeUSA</td>\n",
       "      <td>ID</td>\n",
       "      <td>NAME</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>Admin1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      level_name                      alias        level_id id_field  \\\n",
       "0   block_groups               Block Groups  US.BlockGroups       ID   \n",
       "1         tracts              Census Tracts       US.Tracts       ID   \n",
       "2         places  Cities and Towns (Places)       US.Places       ID   \n",
       "3           zip5                  ZIP Codes         US.ZIP5       ID   \n",
       "4            csd        County Subdivisions          US.CSD       ID   \n",
       "5       counties                   Counties     US.Counties       ID   \n",
       "6           cbsa                      CBSAs         US.CBSA       ID   \n",
       "7             cd    Congressional Districts           US.CD       ID   \n",
       "8            dma                       DMAs          US.DMA       ID   \n",
       "9         states                     States       US.States       ID   \n",
       "10     whole_usa             Entire Country     US.WholeUSA       ID   \n",
       "\n",
       "   name_field             singular_name               plural_name admin_level  \n",
       "0        NAME               Block Group              Block Groups     Admin11  \n",
       "1        NAME              Census Tract             Census Tracts     Admin10  \n",
       "2        NAME                     Place                    Places      Admin9  \n",
       "3        NAME                  ZIP Code                 ZIP Codes      Admin4  \n",
       "4        NAME        County Subdivision       County Subdivisions      Admin7  \n",
       "5        NAME                    County                  Counties      Admin3  \n",
       "6        NAME                      CBSA                     CBSAs      Admin5  \n",
       "7        NAME    Congressional District   Congressional Districts      Admin8  \n",
       "8        NAME                       DMA                      DMAs      Admin6  \n",
       "9        NAME                     State                    States      Admin2  \n",
       "10       NAME  United States of America  United States of America      Admin1  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "usa_local.levels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Enrich Preprocessor\n",
    "\n",
    "The `enrich` method can be wrapped into the `transform` method of a SciKit-Learn Transformer, specifically a preprocessor, to function just like any other preprocessor. In this case, not only have I wrapped the preprocessor, I also have created this preprocessor for specific inputs, standard geographies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 133 entries, 0 to 132\n",
      "Data columns (total 26 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   id_field            133 non-null    object \n",
      " 1   area_desc           133 non-null    object \n",
      " 2   ta_desc             133 non-null    object \n",
      " 3   names               133 non-null    object \n",
      " 4   has_data            133 non-null    int32  \n",
      " 5   aggregation_method  133 non-null    object \n",
      " 6   totpop_cy           133 non-null    float64\n",
      " 7   gqpop_cy            133 non-null    float64\n",
      " 8   divindx_cy          133 non-null    float64\n",
      " 9   tothh_cy            133 non-null    float64\n",
      " 10  avghhsz_cy          133 non-null    float64\n",
      " 11  medhinc_cy          133 non-null    float64\n",
      " 12  avghinc_cy          133 non-null    float64\n",
      " 13  pci_cy              133 non-null    float64\n",
      " 14  tothu_cy            133 non-null    float64\n",
      " 15  owner_cy            133 non-null    float64\n",
      " 16  renter_cy           133 non-null    float64\n",
      " 17  vacant_cy           133 non-null    float64\n",
      " 18  medval_cy           133 non-null    float64\n",
      " 19  avgval_cy           133 non-null    float64\n",
      " 20  popgrw10_cy         133 non-null    float64\n",
      " 21  hhgrw10_cy          133 non-null    float64\n",
      " 22  famgrw10_cy         133 non-null    float64\n",
      " 23  dpop_cy             133 non-null    float64\n",
      " 24  dpopwrk_cy          133 non-null    float64\n",
      " 25  dpopres_cy          133 non-null    float64\n",
      "dtypes: float64(20), int32(1), object(5)\n",
      "memory usage: 26.6+ KB\n"
     ]
    }
   ],
   "source": [
    "from ba_samples.preprocessing import EnrichStandardGeography\n",
    "\n",
    "enrich_preprocessor = EnrichStandardGeography(usa_local, enrich_variables=kv, standard_geography_level='zip5', return_geometry=False)\n",
    "\n",
    "enrich_df = enrich_preprocessor.fit_transform(postal_code_lst)\n",
    "\n",
    "enrich_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_field</th>\n",
       "      <th>area_desc</th>\n",
       "      <th>ta_desc</th>\n",
       "      <th>names</th>\n",
       "      <th>has_data</th>\n",
       "      <th>aggregation_method</th>\n",
       "      <th>totpop_cy</th>\n",
       "      <th>gqpop_cy</th>\n",
       "      <th>divindx_cy</th>\n",
       "      <th>tothh_cy</th>\n",
       "      <th>...</th>\n",
       "      <th>renter_cy</th>\n",
       "      <th>vacant_cy</th>\n",
       "      <th>medval_cy</th>\n",
       "      <th>avgval_cy</th>\n",
       "      <th>popgrw10_cy</th>\n",
       "      <th>hhgrw10_cy</th>\n",
       "      <th>famgrw10_cy</th>\n",
       "      <th>dpop_cy</th>\n",
       "      <th>dpopwrk_cy</th>\n",
       "      <th>dpopres_cy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>97038</td>\n",
       "      <td>97038</td>\n",
       "      <td>TA from geography Layer: 97038</td>\n",
       "      <td>Molalla</td>\n",
       "      <td>1</td>\n",
       "      <td>BlockApportionment:US.BlockGroups;PointsLayer:...</td>\n",
       "      <td>17305.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>42.4</td>\n",
       "      <td>6144.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1552.0</td>\n",
       "      <td>293.0</td>\n",
       "      <td>388300.0</td>\n",
       "      <td>442226.0</td>\n",
       "      <td>1.18</td>\n",
       "      <td>1.20</td>\n",
       "      <td>1.00</td>\n",
       "      <td>13803.0</td>\n",
       "      <td>4468.0</td>\n",
       "      <td>9335.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>97002</td>\n",
       "      <td>97002</td>\n",
       "      <td>TA from geography Layer: 97002</td>\n",
       "      <td>Aurora</td>\n",
       "      <td>1</td>\n",
       "      <td>BlockApportionment:US.BlockGroups;PointsLayer:...</td>\n",
       "      <td>5951.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>54.3</td>\n",
       "      <td>2285.0</td>\n",
       "      <td>...</td>\n",
       "      <td>389.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>491246.0</td>\n",
       "      <td>565932.0</td>\n",
       "      <td>1.09</td>\n",
       "      <td>1.15</td>\n",
       "      <td>0.97</td>\n",
       "      <td>7040.0</td>\n",
       "      <td>3847.0</td>\n",
       "      <td>3193.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>97347</td>\n",
       "      <td>97347</td>\n",
       "      <td>TA from geography Layer: 97347</td>\n",
       "      <td>Grand Ronde</td>\n",
       "      <td>1</td>\n",
       "      <td>BlockApportionment:US.BlockGroups;PointsLayer:...</td>\n",
       "      <td>2163.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.5</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>242.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>375287.0</td>\n",
       "      <td>446223.0</td>\n",
       "      <td>1.28</td>\n",
       "      <td>1.31</td>\n",
       "      <td>1.13</td>\n",
       "      <td>2296.0</td>\n",
       "      <td>907.0</td>\n",
       "      <td>1389.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>97013</td>\n",
       "      <td>97013</td>\n",
       "      <td>TA from geography Layer: 97013</td>\n",
       "      <td>Canby</td>\n",
       "      <td>1</td>\n",
       "      <td>BlockApportionment:US.BlockGroups;PointsLayer:...</td>\n",
       "      <td>25403.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>54.2</td>\n",
       "      <td>9139.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2458.0</td>\n",
       "      <td>340.0</td>\n",
       "      <td>392366.0</td>\n",
       "      <td>437940.0</td>\n",
       "      <td>0.96</td>\n",
       "      <td>0.98</td>\n",
       "      <td>0.85</td>\n",
       "      <td>21914.0</td>\n",
       "      <td>9136.0</td>\n",
       "      <td>12778.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>97017</td>\n",
       "      <td>97017</td>\n",
       "      <td>TA from geography Layer: 97017</td>\n",
       "      <td>Colton</td>\n",
       "      <td>1</td>\n",
       "      <td>BlockApportionment:US.BlockGroups;PointsLayer:...</td>\n",
       "      <td>3194.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.9</td>\n",
       "      <td>1133.0</td>\n",
       "      <td>...</td>\n",
       "      <td>125.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>434483.0</td>\n",
       "      <td>480442.0</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0.72</td>\n",
       "      <td>0.58</td>\n",
       "      <td>2405.0</td>\n",
       "      <td>687.0</td>\n",
       "      <td>1718.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  id_field area_desc                         ta_desc        names  has_data  \\\n",
       "0    97038     97038  TA from geography Layer: 97038      Molalla         1   \n",
       "1    97002     97002  TA from geography Layer: 97002       Aurora         1   \n",
       "2    97347     97347  TA from geography Layer: 97347  Grand Ronde         1   \n",
       "3    97013     97013  TA from geography Layer: 97013        Canby         1   \n",
       "4    97017     97017  TA from geography Layer: 97017       Colton         1   \n",
       "\n",
       "                                  aggregation_method  totpop_cy  gqpop_cy  \\\n",
       "0  BlockApportionment:US.BlockGroups;PointsLayer:...    17305.0      56.0   \n",
       "1  BlockApportionment:US.BlockGroups;PointsLayer:...     5951.0      52.0   \n",
       "2  BlockApportionment:US.BlockGroups;PointsLayer:...     2163.0       0.0   \n",
       "3  BlockApportionment:US.BlockGroups;PointsLayer:...    25403.0     104.0   \n",
       "4  BlockApportionment:US.BlockGroups;PointsLayer:...     3194.0       0.0   \n",
       "\n",
       "   divindx_cy  tothh_cy  ...  renter_cy  vacant_cy  medval_cy  avgval_cy  \\\n",
       "0        42.4    6144.0  ...     1552.0      293.0   388300.0   442226.0   \n",
       "1        54.3    2285.0  ...      389.0       85.0   491246.0   565932.0   \n",
       "2        53.5     850.0  ...      242.0       60.0   375287.0   446223.0   \n",
       "3        54.2    9139.0  ...     2458.0      340.0   392366.0   437940.0   \n",
       "4        16.9    1133.0  ...      125.0       58.0   434483.0   480442.0   \n",
       "\n",
       "   popgrw10_cy  hhgrw10_cy  famgrw10_cy  dpop_cy  dpopwrk_cy  dpopres_cy  \n",
       "0         1.18        1.20         1.00  13803.0      4468.0      9335.0  \n",
       "1         1.09        1.15         0.97   7040.0      3847.0      3193.0  \n",
       "2         1.28        1.31         1.13   2296.0       907.0      1389.0  \n",
       "3         0.96        0.98         0.85  21914.0      9136.0     12778.0  \n",
       "4         0.68        0.72         0.58   2405.0       687.0      1718.0  \n",
       "\n",
       "[5 rows x 26 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "enrich_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Filtering Columns\n",
    "\n",
    "The output from `enrich` includes a number of metadata columns. If performing subsequent analysis, we need to prune these columns. We can use another preprocessor for this as well, one only keeping columns with enriched values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 133 entries, 97038 to 98671\n",
      "Data columns (total 17 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   totpop_cy   133 non-null    float64\n",
      " 1   gqpop_cy    133 non-null    float64\n",
      " 2   divindx_cy  133 non-null    float64\n",
      " 3   tothh_cy    133 non-null    float64\n",
      " 4   avghhsz_cy  133 non-null    float64\n",
      " 5   medhinc_cy  133 non-null    float64\n",
      " 6   avghinc_cy  133 non-null    float64\n",
      " 7   pci_cy      133 non-null    float64\n",
      " 8   tothu_cy    133 non-null    float64\n",
      " 9   owner_cy    133 non-null    float64\n",
      " 10  renter_cy   133 non-null    float64\n",
      " 11  vacant_cy   133 non-null    float64\n",
      " 12  medval_cy   133 non-null    float64\n",
      " 13  avgval_cy   133 non-null    float64\n",
      " 14  dpop_cy     133 non-null    float64\n",
      " 15  dpopwrk_cy  133 non-null    float64\n",
      " 16  dpopres_cy  133 non-null    float64\n",
      "dtypes: float64(17)\n",
      "memory usage: 18.7+ KB\n"
     ]
    }
   ],
   "source": [
    "from ba_samples.preprocessing import KeepOnlyEnrichColumns\n",
    "\n",
    "enrich_zip_pipe =  make_pipeline(\n",
    "    EnrichStandardGeography(usa_local, enrich_variables=kv, standard_geography_level='zip5', return_geometry=False),\n",
    "    KeepOnlyEnrichColumns(usa_local, id_column='id_field', keep_geometry=False)\n",
    ")\n",
    "\n",
    "enrich_df = enrich_zip_pipe.fit_transform(postal_code_lst)\n",
    "\n",
    "enrich_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>keyusfacts_totpop_cy</th>\n",
       "      <th>keyusfacts_gqpop_cy</th>\n",
       "      <th>keyusfacts_divindx_cy</th>\n",
       "      <th>keyusfacts_tothh_cy</th>\n",
       "      <th>keyusfacts_avghhsz_cy</th>\n",
       "      <th>keyusfacts_medhinc_cy</th>\n",
       "      <th>keyusfacts_avghinc_cy</th>\n",
       "      <th>keyusfacts_pci_cy</th>\n",
       "      <th>keyusfacts_tothu_cy</th>\n",
       "      <th>keyusfacts_owner_cy</th>\n",
       "      <th>keyusfacts_renter_cy</th>\n",
       "      <th>keyusfacts_vacant_cy</th>\n",
       "      <th>keyusfacts_medval_cy</th>\n",
       "      <th>keyusfacts_avgval_cy</th>\n",
       "      <th>keyusfacts_popgrw10cy</th>\n",
       "      <th>keyusfacts_hhgrw10cy</th>\n",
       "      <th>keyusfacts_famgrw10cy</th>\n",
       "      <th>keyusfacts_dpop_cy</th>\n",
       "      <th>keyusfacts_dpopwrk_cy</th>\n",
       "      <th>keyusfacts_dpopres_cy</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_field</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>83801</th>\n",
       "      <td>8497.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.6</td>\n",
       "      <td>3142.0</td>\n",
       "      <td>2.70</td>\n",
       "      <td>62413.0</td>\n",
       "      <td>78746.0</td>\n",
       "      <td>30156.0</td>\n",
       "      <td>3563.0</td>\n",
       "      <td>2660.0</td>\n",
       "      <td>482.0</td>\n",
       "      <td>421.0</td>\n",
       "      <td>382542.0</td>\n",
       "      <td>391184.0</td>\n",
       "      <td>2.07</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.92</td>\n",
       "      <td>6502.0</td>\n",
       "      <td>1962.0</td>\n",
       "      <td>4540.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83803</th>\n",
       "      <td>656.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>341.0</td>\n",
       "      <td>1.92</td>\n",
       "      <td>43344.0</td>\n",
       "      <td>61732.0</td>\n",
       "      <td>29472.0</td>\n",
       "      <td>659.0</td>\n",
       "      <td>264.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>318.0</td>\n",
       "      <td>391333.0</td>\n",
       "      <td>403113.0</td>\n",
       "      <td>1.76</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1.56</td>\n",
       "      <td>499.0</td>\n",
       "      <td>145.0</td>\n",
       "      <td>354.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83810</th>\n",
       "      <td>1090.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11.7</td>\n",
       "      <td>479.0</td>\n",
       "      <td>2.27</td>\n",
       "      <td>60088.0</td>\n",
       "      <td>89006.0</td>\n",
       "      <td>38340.0</td>\n",
       "      <td>579.0</td>\n",
       "      <td>406.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>100.0</td>\n",
       "      <td>437903.0</td>\n",
       "      <td>464383.0</td>\n",
       "      <td>0.94</td>\n",
       "      <td>0.96</td>\n",
       "      <td>0.76</td>\n",
       "      <td>762.0</td>\n",
       "      <td>246.0</td>\n",
       "      <td>516.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83814</th>\n",
       "      <td>28546.0</td>\n",
       "      <td>609.0</td>\n",
       "      <td>21.2</td>\n",
       "      <td>12454.0</td>\n",
       "      <td>2.24</td>\n",
       "      <td>57487.0</td>\n",
       "      <td>80524.0</td>\n",
       "      <td>34960.0</td>\n",
       "      <td>15054.0</td>\n",
       "      <td>6855.0</td>\n",
       "      <td>5599.0</td>\n",
       "      <td>2600.0</td>\n",
       "      <td>377722.0</td>\n",
       "      <td>508589.0</td>\n",
       "      <td>1.86</td>\n",
       "      <td>1.91</td>\n",
       "      <td>1.72</td>\n",
       "      <td>38178.0</td>\n",
       "      <td>23011.0</td>\n",
       "      <td>15167.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83815</th>\n",
       "      <td>38614.0</td>\n",
       "      <td>617.0</td>\n",
       "      <td>24.1</td>\n",
       "      <td>15247.0</td>\n",
       "      <td>2.49</td>\n",
       "      <td>56872.0</td>\n",
       "      <td>73431.0</td>\n",
       "      <td>29323.0</td>\n",
       "      <td>16393.0</td>\n",
       "      <td>9649.0</td>\n",
       "      <td>5598.0</td>\n",
       "      <td>1146.0</td>\n",
       "      <td>308198.0</td>\n",
       "      <td>374194.0</td>\n",
       "      <td>1.79</td>\n",
       "      <td>1.78</td>\n",
       "      <td>1.51</td>\n",
       "      <td>37345.0</td>\n",
       "      <td>15891.0</td>\n",
       "      <td>21454.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          keyusfacts_totpop_cy  keyusfacts_gqpop_cy  keyusfacts_divindx_cy  \\\n",
       "id_field                                                                     \n",
       "83801                   8497.0                  0.0                   13.6   \n",
       "83803                    656.0                  0.0                   10.5   \n",
       "83810                   1090.0                  4.0                   11.7   \n",
       "83814                  28546.0                609.0                   21.2   \n",
       "83815                  38614.0                617.0                   24.1   \n",
       "\n",
       "          keyusfacts_tothh_cy  keyusfacts_avghhsz_cy  keyusfacts_medhinc_cy  \\\n",
       "id_field                                                                      \n",
       "83801                  3142.0                   2.70                62413.0   \n",
       "83803                   341.0                   1.92                43344.0   \n",
       "83810                   479.0                   2.27                60088.0   \n",
       "83814                 12454.0                   2.24                57487.0   \n",
       "83815                 15247.0                   2.49                56872.0   \n",
       "\n",
       "          keyusfacts_avghinc_cy  keyusfacts_pci_cy  keyusfacts_tothu_cy  \\\n",
       "id_field                                                                  \n",
       "83801                   78746.0            30156.0               3563.0   \n",
       "83803                   61732.0            29472.0                659.0   \n",
       "83810                   89006.0            38340.0                579.0   \n",
       "83814                   80524.0            34960.0              15054.0   \n",
       "83815                   73431.0            29323.0              16393.0   \n",
       "\n",
       "          keyusfacts_owner_cy  keyusfacts_renter_cy  keyusfacts_vacant_cy  \\\n",
       "id_field                                                                    \n",
       "83801                  2660.0                 482.0                 421.0   \n",
       "83803                   264.0                  76.0                 318.0   \n",
       "83810                   406.0                  72.0                 100.0   \n",
       "83814                  6855.0                5599.0                2600.0   \n",
       "83815                  9649.0                5598.0                1146.0   \n",
       "\n",
       "          keyusfacts_medval_cy  keyusfacts_avgval_cy  keyusfacts_popgrw10cy  \\\n",
       "id_field                                                                      \n",
       "83801                 382542.0              391184.0                   2.07   \n",
       "83803                 391333.0              403113.0                   1.76   \n",
       "83810                 437903.0              464383.0                   0.94   \n",
       "83814                 377722.0              508589.0                   1.86   \n",
       "83815                 308198.0              374194.0                   1.79   \n",
       "\n",
       "          keyusfacts_hhgrw10cy  keyusfacts_famgrw10cy  keyusfacts_dpop_cy  \\\n",
       "id_field                                                                    \n",
       "83801                     2.09                   1.92              6502.0   \n",
       "83803                     1.80                   1.56               499.0   \n",
       "83810                     0.96                   0.76               762.0   \n",
       "83814                     1.91                   1.72             38178.0   \n",
       "83815                     1.78                   1.51             37345.0   \n",
       "\n",
       "          keyusfacts_dpopwrk_cy  keyusfacts_dpopres_cy  \n",
       "id_field                                                \n",
       "83801                    1962.0                 4540.0  \n",
       "83803                     145.0                  354.0  \n",
       "83810                     246.0                  516.0  \n",
       "83814                   23011.0                15167.0  \n",
       "83815                   15891.0                21454.0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "enrich_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Clustering Block Groups Using Demographics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Stepping up our game a little, now we are getting all the US Census Block Groups in Portland because we are interested in what demographic variables have the most differences in Portland, and are going to use a SciKit-Learn pipeline to streamline the process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Block Group Count: 1,421\n"
     ]
    }
   ],
   "source": [
    "block_groups_df = pd.read_pickle(block_groups_pth)\n",
    "block_groups_lst = list(block_groups_df['ID'])\n",
    "\n",
    "print(f'Block Group Count: {len(block_groups_lst):,}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Source - ArcGIS Online\n",
    "\n",
    "This time around, we no longer are using local resources. Now, we are switching to ArcGIS Online."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Country - United States (GIS @ https://baqa.mapsqa.arcgis.com version:9.4)>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gis_agol = GIS(url=os.getenv('ESRI_GIS_URL'), username=os.getenv('ESRI_GIS_USERNAME'), password=os.getenv('ESRI_GIS_PASSWORD'))\n",
    "usa_agol = Country('usa', gis=gis_agol)\n",
    "\n",
    "usa_agol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Selecting Variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This time around, we are going big. By just grabbing a lot of categories, we are selecting a wide swath of demographic varaiables. There wasn not a tremenedously emperical method used to retrieve these categories. I just grabbed quite a few. Below, please notice how I used some naming conventions to filter out some values to exclude."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1686 entries, 0 to 1685\n",
      "Data columns (total 8 columns):\n",
      " #   Column             Non-Null Count  Dtype \n",
      "---  ------             --------------  ----- \n",
      " 0   name               1686 non-null   object\n",
      " 1   alias              1686 non-null   object\n",
      " 2   data_collection    1686 non-null   object\n",
      " 3   enrich_name        1686 non-null   object\n",
      " 4   enrich_field_name  1686 non-null   object\n",
      " 5   description        1686 non-null   object\n",
      " 6   vintage            1686 non-null   object\n",
      " 7   units              1686 non-null   object\n",
      "dtypes: object(8)\n",
      "memory usage: 105.5+ KB\n"
     ]
    }
   ],
   "source": [
    "collections = ['classofworker', 'commute', 'disability', 'disposableincome', 'disposableincome', 'educationalattainment', \n",
    "               'financial', 'foodstampssnap', 'gender', 'generations', 'groupquarters', 'health', 'healthinsurancecoverage', \n",
    "               'homevalue', 'householdincome', 'households', 'householdsbyageofhouseholder', 'householdsbysize', \n",
    "               'householdtotals', 'householdtype', 'housingbyageofhouseholder', 'housingbysize', 'housingcosts', \n",
    "               'housinghousehold', 'housingunittotals', 'industry', 'internetcomputerusage', 'keyusfacts',\n",
    "               'language', 'network', 'occupation', 'wealth', 'veterans']\n",
    "\n",
    "\n",
    "ev = usa_agol.enrich_variables\n",
    "\n",
    "enrich_vars = ev[\n",
    "    (ev.data_collection.isin(collections))\n",
    "    & (~ev.alias.str.lower().str.contains('index'))  # exclude calculated indexes\n",
    "    & (~ev.name.str.lower().str.endswith('_a'))      # exclude averages\n",
    "    & (~ev.name.str.lower().str.contains('_fy'))     # exclude future year\n",
    "    & (~ev.name.str.lower().str.contains('fy_'))     # exclude another future year pattern\n",
    "    & (~ev.alias.str.contains('2010'))               # exclude 2010 census variables - we're not living in the past anymore\n",
    "].drop_duplicates('name').reset_index(drop=True)\n",
    "\n",
    "enrich_vars.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "source": [
    "Just double checking, we can quickly see the correct value we need to use for United States Census Block Groups is `block_groups`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>level_name</th>\n",
       "      <th>singular_name</th>\n",
       "      <th>plural_name</th>\n",
       "      <th>alias</th>\n",
       "      <th>level_id</th>\n",
       "      <th>admin_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>block_groups</td>\n",
       "      <td>Block Group</td>\n",
       "      <td>Block Groups</td>\n",
       "      <td>Block Groups</td>\n",
       "      <td>US.BlockGroups</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tracts</td>\n",
       "      <td>Census Tract</td>\n",
       "      <td>Census Tracts</td>\n",
       "      <td>Census Tracts</td>\n",
       "      <td>US.Tracts</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>places</td>\n",
       "      <td>Place</td>\n",
       "      <td>Places</td>\n",
       "      <td>Cities and Towns (Places)</td>\n",
       "      <td>US.Places</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>zip5</td>\n",
       "      <td>ZIP Code</td>\n",
       "      <td>ZIP Codes</td>\n",
       "      <td>ZIP Codes</td>\n",
       "      <td>US.ZIP5</td>\n",
       "      <td>Admin4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>csd</td>\n",
       "      <td>County Subdivision</td>\n",
       "      <td>County Subdivisions</td>\n",
       "      <td>County Subdivisions</td>\n",
       "      <td>US.CSD</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>counties</td>\n",
       "      <td>County</td>\n",
       "      <td>Counties</td>\n",
       "      <td>Counties</td>\n",
       "      <td>US.Counties</td>\n",
       "      <td>Admin3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>cbsa</td>\n",
       "      <td>CBSA</td>\n",
       "      <td>CBSAs</td>\n",
       "      <td>CBSAs</td>\n",
       "      <td>US.CBSA</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>cd</td>\n",
       "      <td>Congressional District</td>\n",
       "      <td>Congressional Districts</td>\n",
       "      <td>Congressional Districts</td>\n",
       "      <td>US.CD</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>dma</td>\n",
       "      <td>DMA</td>\n",
       "      <td>DMAs</td>\n",
       "      <td>DMAs</td>\n",
       "      <td>US.DMA</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>states</td>\n",
       "      <td>State</td>\n",
       "      <td>States</td>\n",
       "      <td>States</td>\n",
       "      <td>US.States</td>\n",
       "      <td>Admin2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>whole_usa</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>Entire Country</td>\n",
       "      <td>US.WholeUSA</td>\n",
       "      <td>Admin1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      level_name             singular_name               plural_name  \\\n",
       "0   block_groups               Block Group              Block Groups   \n",
       "1         tracts              Census Tract             Census Tracts   \n",
       "2         places                     Place                    Places   \n",
       "3           zip5                  ZIP Code                 ZIP Codes   \n",
       "4            csd        County Subdivision       County Subdivisions   \n",
       "5       counties                    County                  Counties   \n",
       "6           cbsa                      CBSA                     CBSAs   \n",
       "7             cd    Congressional District   Congressional Districts   \n",
       "8            dma                       DMA                      DMAs   \n",
       "9         states                     State                    States   \n",
       "10     whole_usa  United States of America  United States of America   \n",
       "\n",
       "                        alias        level_id admin_level  \n",
       "0                Block Groups  US.BlockGroups              \n",
       "1               Census Tracts       US.Tracts              \n",
       "2   Cities and Towns (Places)       US.Places              \n",
       "3                   ZIP Codes         US.ZIP5      Admin4  \n",
       "4         County Subdivisions          US.CSD              \n",
       "5                    Counties     US.Counties      Admin3  \n",
       "6                       CBSAs         US.CBSA              \n",
       "7     Congressional Districts           US.CD              \n",
       "8                        DMAs          US.DMA              \n",
       "9                      States       US.States      Admin2  \n",
       "10             Entire Country     US.WholeUSA      Admin1  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "usa_agol.levels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Get Demographics\n",
    "\n",
    "Just like before, we are going to enrich, but this time around we are using a LOT of data - over 1,500 variables. This time around, we are including the geometry so we can use it later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1421 entries, 0 to 1420\n",
      "Columns: 1324 entries, acscivemp to SHAPE\n",
      "dtypes: float64(67), geometry(1), int64(1256)\n",
      "memory usage: 14.4 MB\n"
     ]
    }
   ],
   "source": [
    "# run the enrich steps autonomously so we can access the keeper properties in later steps\n",
    "enrich_pipe = make_pipeline(\n",
    "    EnrichStandardGeography(usa_agol, enrich_variables=enrich_vars, standard_geography_level='block_groups', return_geometry=True),\n",
    "    KeepOnlyEnrichColumns(usa_agol, keep_geometry=True)\n",
    ")\n",
    "enrich_df = enrich_pipe.fit_transform(block_groups_lst)\n",
    "\n",
    "enrich_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Get Just the Enriched Columns\n",
    "\n",
    "Following enrichment, now we are getting just the columns _not_ containing the geometry, the polygon shapes of the Block Groups. Notice the `geometry` date type is _no longer_ listed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1421 entries, 0 to 1420\n",
      "Columns: 1323 entries, acscivemp to acstotpop\n",
      "dtypes: float64(67), int64(1256)\n",
      "memory usage: 14.3 MB\n"
     ]
    }
   ],
   "source": [
    "demographic_cols = [c for c in enrich_df.columns if c != enrich_df.spatial.name]\n",
    "training_df = enrich_df.loc[:,demographic_cols]\n",
    "\n",
    "training_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Cleanup\n",
    "\n",
    "Since subsequent steps need standard scaled data and have difficulty with zero variance and missing values, we use tools from Sci-Kit Learn to clean up the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.11816762, 0.16923077, 0.66666667, ..., 0.        , 0.        ,\n",
       "        0.19456258],\n",
       "       [0.1832379 , 0.17342657, 0.33333333, ..., 0.        , 0.        ,\n",
       "        0.23329283],\n",
       "       [0.07105674, 0.18881119, 0.66666667, ..., 0.        , 0.        ,\n",
       "        0.1240887 ],\n",
       "       ...,\n",
       "       [0.15955232, 0.12167832, 0.33333333, ..., 0.        , 0.        ,\n",
       "        0.20990279],\n",
       "       [0.0840708 , 0.23636364, 0.66666667, ..., 0.        , 0.        ,\n",
       "        0.13456865],\n",
       "       [0.26106195, 0.21818182, 0.33333333, ..., 0.        , 0.        ,\n",
       "        0.30726002]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "from sklearn.feature_selection import VarianceThreshold\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scale_pipe = make_pipeline(\n",
    "    MinMaxScaler(),                         # get on same scale - just using because it is simple\n",
    "    VarianceThreshold(threshold=0.0),       # drop zero variance variables\n",
    "    SimpleImputer()                         # using defaults, filling nulls with mean\n",
    ")\n",
    "\n",
    "scaled_arr = scale_pipe.fit_transform(training_df)\n",
    "\n",
    "scaled_arr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Dimensionalty Reduction\n",
    "\n",
    "Over 1,000 variables is a lot to process. To speed up the process, we first are going to use Principal Component Analysis (PCA) for dimensionality reduction, using a scree plot to ascertain how many components to create. In this case, we are going with 200 to retain roughly 90% of the variation in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "\n",
    "pca = PCA().fit(scaled_arr)\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "plt.figure(figsize=(10,8))\n",
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "plt.xlabel('number of components')\n",
    "plt.ylabel('cumulative explained variance')\n",
    "plt.yticks([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Clustering\n",
    "\n",
    "From the scree plot we know the number of clusters to use with PCA, so we are now going to combine this with K-Means Clustering in a succinct pipeline. Once we have the clusters created, we then will create a new spatially enabled Pandas data frame by combining the output clusters with the geometry returned from geoenrichment earlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1421 entries, 0 to 1420\n",
      "Data columns (total 3 columns):\n",
      " #   Column      Non-Null Count  Dtype   \n",
      "---  ------      --------------  -----   \n",
      " 0   fips        1421 non-null   object  \n",
      " 1   cluster_id  1421 non-null   int32   \n",
      " 2   SHAPE       1421 non-null   geometry\n",
      "dtypes: geometry(1), int32(1), object(1)\n",
      "memory usage: 27.9+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fips</th>\n",
       "      <th>cluster_id</th>\n",
       "      <th>SHAPE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>410710305021</td>\n",
       "      <td>2</td>\n",
       "      <td>{\"rings\": [[[-123.56601700006303, 45.216389999...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>410050237001</td>\n",
       "      <td>1</td>\n",
       "      <td>{\"rings\": [[[-122.61617099963205, 45.267457999...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>410050237002</td>\n",
       "      <td>4</td>\n",
       "      <td>{\"rings\": [[[-122.5704800001157, 45.2375169997...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>410050237003</td>\n",
       "      <td>1</td>\n",
       "      <td>{\"rings\": [[[-122.5111050007072, 45.2601139996...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>410050237004</td>\n",
       "      <td>1</td>\n",
       "      <td>{\"rings\": [[[-122.50749899966338, 45.230098999...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           fips  cluster_id                                              SHAPE\n",
       "0  410710305021           2  {\"rings\": [[[-123.56601700006303, 45.216389999...\n",
       "1  410050237001           1  {\"rings\": [[[-122.61617099963205, 45.267457999...\n",
       "2  410050237002           4  {\"rings\": [[[-122.5704800001157, 45.2375169997...\n",
       "3  410050237003           1  {\"rings\": [[[-122.5111050007072, 45.2601139996...\n",
       "4  410050237004           1  {\"rings\": [[[-122.50749899966338, 45.230098999..."
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "cluster_pipe = make_pipeline(\n",
    "    PCA(n_components=200),\n",
    "    KMeans(n_clusters=5)\n",
    ")\n",
    "cluster_pipe.fit_transform(scaled_arr)\n",
    "\n",
    "cluster_df = pd.DataFrame(zip(block_groups_lst, cluster_pipe.named_steps.kmeans.labels_, enrich_df['SHAPE']), \n",
    "                          columns=['fips', 'cluster_id', 'SHAPE'])\n",
    "cluster_df.spatial.set_geometry('SHAPE')\n",
    "\n",
    "cluster_df.info()\n",
    "cluster_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Dissolve Clusters\n",
    "\n",
    "For visualization on a map and also for further investigation using Inforgaphics, we need the geometries consolidated into a single geometry per cluster. The ArcGIS Online Geometry engine can be used through the `arcgis.geometry.union` method to accomplish this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from arcgis.geometry import union\n",
    "\n",
    "def dissolve_by_cluster_id(cluster_id):\n",
    "    \"\"\"Helper to dissolve geometries based on the cluster_id.\"\"\"\n",
    "    # pull all the geometries out of the cluster dataframe matching the cluster id as a list\n",
    "    cluster_geom_lst = list(cluster_df[cluster_df['cluster_id'] == cluster_id]['SHAPE'])\n",
    "    \n",
    "    # use the ArcGIS Online geometry service to combine all the geometeries into one\n",
    "    dissolved_cluster_geom = union(cluster_geom_lst, gis=gis_agol)\n",
    "    \n",
    "    return dissolved_cluster_geom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created geometry for cluster id 0\n",
      "Created geometry for cluster id 1\n",
      "Created geometry for cluster id 2\n",
      "Created geometry for cluster id 3\n",
      "Created geometry for cluster id 4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster_id</th>\n",
       "      <th>SHAPE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>{\"rings\": [[[-122.58948899999996, 45.181993000...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>{\"rings\": [[[-122.61984599899995, 45.118054999...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>{\"rings\": [[[-123.38401899999997, 45.110430000...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>{\"rings\": [[[-123.45598799999999, 45.125803999...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>{\"rings\": [[[-123.37559099899994, 45.094734000...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cluster_id                                              SHAPE\n",
       "0           0  {\"rings\": [[[-122.58948899999996, 45.181993000...\n",
       "1           1  {\"rings\": [[[-122.61984599899995, 45.118054999...\n",
       "2           2  {\"rings\": [[[-123.38401899999997, 45.110430000...\n",
       "3           3  {\"rings\": [[[-123.45598799999999, 45.125803999...\n",
       "4           4  {\"rings\": [[[-123.37559099899994, 45.094734000..."
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "uniq_cluster_id_lst = cluster_df['cluster_id'].unique()\n",
    "uniq_cluster_id_lst.sort()\n",
    "\n",
    "cluster_geom_lst = []\n",
    "for c_id in uniq_cluster_id_lst:\n",
    "    c_geom = dissolve_by_cluster_id(c_id)\n",
    "    cluster_geom_lst.append(c_geom)\n",
    "    print(f'Created geometry for cluster id {c_id}')\n",
    "\n",
    "dissolved_cluster_df = pd.DataFrame(zip(uniq_cluster_id_lst, cluster_geom_lst), columns=['cluster_id', 'SHAPE'])\n",
    "dissolved_cluster_df.spatial.set_geometry('SHAPE')\n",
    "\n",
    "dissolved_cluster_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "## Visualizing, Sharing and Interrogating\n",
    "\n",
    "Both outputs from the clustering are spatially enabled Pandas data frames, and can easily be shared with ArcGIS Online. From there, the results of these analyses can be quickly visualized in maps and mapping applications, shared to communicate results, and further interrogated through Infographics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div class=\"item_container\" style=\"height: auto; overflow: hidden; border: 1px solid #cfcfcf; border-radius: 2px; background: #f6fafa; line-height: 1.21429em; padding: 10px;\">\n",
       "                    <div class=\"item_left\" style=\"width: 210px; float: left;\">\n",
       "                       <a href='https://baqa.mapsqa.arcgis.com/home/item.html?id=d896c4c45de9441a8cef28669ec20485' target='_blank'>\n",
       "                        <img src='http://static.arcgis.com/images/desktopapp.png' class=\"itemThumbnail\">\n",
       "                       </a>\n",
       "                    </div>\n",
       "\n",
       "                    <div class=\"item_right\"     style=\"float: none; width: auto; overflow: hidden;\">\n",
       "                        <a href='https://baqa.mapsqa.arcgis.com/home/item.html?id=d896c4c45de9441a8cef28669ec20485' target='_blank'><b>pdx_cluster_block_groups</b>\n",
       "                        </a>\n",
       "                        <br/><img src='https://baqa.mapsqa.arcgis.com/home/js/jsapi/esri/css/images/item_type_icons/featureshosted16.png' style=\"vertical-align:middle;\">Feature Layer Collection by jmccune_baqa\n",
       "                        <br/>Last Modified: February 16, 2022\n",
       "                        <br/>0 comments, 0 views\n",
       "                    </div>\n",
       "                </div>\n",
       "                "
      ],
      "text/plain": [
       "<Item title:\"pdx_cluster_block_groups\" type:Feature Layer Collection owner:jmccune_baqa>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bg_lyr = cluster_df.spatial.to_featurelayer('pdx_cluster_block_groups', \n",
    "                                            gis=gis_agol, \n",
    "                                            tags=['pdx', 'machine learning', 'clustering'],\n",
    "                                            service_name='pdx_cluster_block_groups')\n",
    "\n",
    "bg_lyr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "slideshow": {
     "slide_type": "subslide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div class=\"item_container\" style=\"height: auto; overflow: hidden; border: 1px solid #cfcfcf; border-radius: 2px; background: #f6fafa; line-height: 1.21429em; padding: 10px;\">\n",
       "                    <div class=\"item_left\" style=\"width: 210px; float: left;\">\n",
       "                       <a href='https://baqa.mapsqa.arcgis.com/home/item.html?id=4777aec91420441dbb39e672ef4529d1' target='_blank'>\n",
       "                        <img src='http://static.arcgis.com/images/desktopapp.png' class=\"itemThumbnail\">\n",
       "                       </a>\n",
       "                    </div>\n",
       "\n",
       "                    <div class=\"item_right\"     style=\"float: none; width: auto; overflow: hidden;\">\n",
       "                        <a href='https://baqa.mapsqa.arcgis.com/home/item.html?id=4777aec91420441dbb39e672ef4529d1' target='_blank'><b>pdx_clusters</b>\n",
       "                        </a>\n",
       "                        <br/><img src='https://baqa.mapsqa.arcgis.com/home/js/jsapi/esri/css/images/item_type_icons/featureshosted16.png' style=\"vertical-align:middle;\">Feature Layer Collection by jmccune_baqa\n",
       "                        <br/>Last Modified: February 16, 2022\n",
       "                        <br/>0 comments, 0 views\n",
       "                    </div>\n",
       "                </div>\n",
       "                "
      ],
      "text/plain": [
       "<Item title:\"pdx_clusters\" type:Feature Layer Collection owner:jmccune_baqa>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clstr_lyr = dissolved_cluster_df.spatial.to_featurelayer('pdx_clusters', \n",
    "                                                         gis=gis_agol, \n",
    "                                                         tags=['pdx', 'machine learning', 'clustering'], \n",
    "                                                         service_name='pdx_clusters')\n",
    "\n",
    "clstr_lyr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
